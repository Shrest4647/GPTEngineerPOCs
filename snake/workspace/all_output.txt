Based on the requirements and assumptions, here is the proposed architecture for the tic tac toe game:

1. `game.py`: The entrypoint file that initializes the game and handles the game loop.
2. `board.py`: Contains the `Board` class that represents the game board and provides methods for updating and checking the board state.
3. `player.py`: Contains the `Player` class that represents a player and provides methods for making moves.
4. `ai.py`: Contains the `AI` class that represents the AI opponent and implements the minimax algorithm for making optimal moves.
5. `database.py`: Contains the `Database` class that handles the SQLite database operations for saving and retrieving game state and history.
6. `scoreboard.py`: Contains the `Scoreboard` class that keeps track of wins and losses for each player.
7. `constants.py`: Contains constant values used throughout the game.

Now let's proceed with implementing the code for each file.

`game.py`
```python
import pygame
from board import Board
from player import Player
from ai import AI
from database import Database
from scoreboard import Scoreboard

# Initialize pygame
pygame.init()

# Set up the game window
window_width = 600
window_height = 600
window = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("Tic Tac Toe")

# Initialize the game objects
board = Board()
player1 = Player("Player 1", "X")
player2 = Player("Player 2", "O")
ai = AI("AI", "O")
database = Database()
scoreboard = Scoreboard()

# Game loop
def game_loop():
    running = True
    current_player = player1
    game_over = False

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN and not game_over:
                if current_player == player1:
                    pos = pygame.mouse.get_pos()
                    row, col = board.get_clicked_position(pos)
                    if board.is_valid_move(row, col):
                        board.make_move(row, col, current_player.symbol)
                        database.save_game_state(board.get_state(), current_player.name)
                        game_over = board.check_win(current_player.symbol) or board.check_draw()
                        if game_over:
                            scoreboard.update_score(current_player.name)
                else:
                    row, col = ai.get_best_move(board.get_state())
                    board.make_move(row, col, current_player.symbol)
                    database.save_game_state(board.get_state(), current_player.name)
                    game_over = board.check_win(current_player.symbol) or board.check_draw()
                    if game_over:
                        scoreboard.update_score(current_player.name)

                current_player = player2 if current_player == player1 else player1

        # Draw the game board
        board.draw(window)

        # Update the display
        pygame.display.update()

    pygame.quit()

# Start the game
game_loop()
```

`board.py`
```python
import pygame

class Board:
    def __init__(self):
        self.board_size = 3
        self.board = [[' ' for _ in range(self.board_size)] for _ in range(self.board_size)]
        self.square_size = 200
        self.margin = 100

    def draw(self, window):
        window.fill((255, 255, 255))

        for row in range(self.board_size):
            for col in range(self.board_size):
                pygame.draw.rect(window, (0, 0, 0), (col * self.square_size + self.margin, row * self.square_size + self.margin, self.square_size, self.square_size), 2)
                symbol = self.board[row][col]
                if symbol != ' ':
                    font = pygame.font.Font(None, 150)
                    text = font.render(symbol, True, (0, 0, 0))
                    text_rect = text.get_rect(center=(col * self.square_size + self.margin + self.square_size // 2, row * self.square_size + self.margin + self.square_size // 2))
                    window.blit(text, text_rect)

    def get_clicked_position(self, pos):
        row = (pos[1] - self.margin) // self.square_size
        col = (pos[0] - self.margin) // self.square_size
        return int(row), int(col)

    def is_valid_move(self, row, col):
        return self.board[row][col] == ' '

    def make_move(self, row, col, symbol):
        self.board[row][col] = symbol

    def get_state(self):
        return [symbol for row in self.board for symbol in row]

    def check_win(self, symbol):
        # Check rows
        for row in self.board:
            if all(cell == symbol for cell in row):
                return True

        # Check columns
        for col in range(self.board_size):
            if all(row[col] == symbol for row in self.board):
                return True

        # Check diagonals
        if all(self.board[i][i] == symbol for i in range(self.board_size)):
            return True
        if all(self.board[i][self.board_size - 1 - i] == symbol for i in range(self.board_size)):
            return True

        return False

    def check_draw(self):
        return all(symbol != ' ' for row in self.board for symbol in row) and not self.check_win('X') and not self.check_win('O')
```

`player.py`
```python
class Player:
    def __init__(self, name, symbol):
        self.name = name
        self.symbol = symbol
```

`ai.py`
```python
class AI:
    def __init__(self, name, symbol):
        self.name = name
        self.symbol = symbol

    def get_best_move(self, board_state):
        # Implement minimax algorithm to determine the best move
        pass
```

`database.py`
```python
import sqlite3

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('game.db')
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute("CREATE TABLE IF NOT EXISTS game_history (id INTEGER PRIMARY KEY AUTOINCREMENT, board_state TEXT, player_name TEXT)")

    def save_game_state(self, board_state, player_name):
        self.cursor.execute("INSERT INTO game_history (board_state, player_name) VALUES (?, ?)", (','.join(board_state), player_name))
        self.conn.commit()

    def close_connection(self):
        self.cursor.close()
        self.conn.close()
```

`scoreboard.py`
```python
class Scoreboard:
    def __init__(self):
        self.scores = {'Player 1': 0, 'Player 2': 0, 'AI': 0}

    def update_score(self, player_name):
        self.scores[player_name] += 1
```

`constants.py`
```python
# Constants for board size
BOARD_SIZE_3X3 = 3
BOARD_SIZE_4X4 = 4
BOARD_SIZE_5X5 = 5
```

Please note that the code provided is a basic implementation and may require further refinement and error handling.